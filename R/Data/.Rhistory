print(c(i,j))
GRM_common_sim_matrix[i,j] <- GRM_common_sim_matrix[j,i] <- pairwise_sim(GRM_common[i,1:2], GRM_common[j,1:2])
}
}
for (i in 1:nHap){
for (j in 1:i){
print(c(i,j))
GRM_rare_sim_matrix[i,j] <- GRM_rare_sim_matrix[j,i] <- pairwise_sim(GRM_rare[i,1:2], GRM_rare[j,1:2])
}
}
SSR_matrix <- ratio_matrix(GRM_common_sim_matrix, GRM_rare_sim_matrix, nHap, superPopulationCode)
common_ratio <- SSR_matrix[,'common_wg']/SSR_matrix[,'common_og']
rare_ratio <- SSR_matrix[,'rare_wg']/SSR_matrix[,'rare_og']
ratioMatrix <- cbind(common_ratio, rare_ratio)
colnames(ratioMatrix) <- c('common', 'rare')
melted_ratioMatrix <- melt(ratioMatrix)
colnames(melted_ratioMatrix) <- c('haplotype', 'var_type', 'ratio')
melted_ratioMatrix$superPop <- rep(superPopulationCode, 2)
g <- ggplot() + geom_boxplot(data=melted_ratioMatrix, aes(x=var_type, y=ratio))
g <- g + xlab('variant type') + ylab('Ratio measure')
g <- g + theme(axis.text.x = element_text(angle = 60, hjust = 1))
g
g <- ggplot() + geom_boxplot(data=melted_ratioMatrix, aes(x=superPop, y=ratio, color=var_type))
g <- g + xlab('Super populations') + ylab('Ratio measure')
g <- g + theme(axis.text.x = element_text(angle = 60, hjust = 1))
g
eig_GRM <- readRDS("/Users/Divy/Dropbox (Partners HealthCare)/Haplotype_Analysis/Data/EigenStrat_all.rds")
eig_GRM_obj <- eig_GRM$all_no_afr
dim(eig_GRM_obj)
eig_GRM <- readRDS("/Users/Divy/Dropbox (Partners HealthCare)/Haplotype_Analysis/Data/EigenStrat_all.rds")
eig_GRM_obj <- eig_GRM$all_no_afr
eig_GRM_rare <- readRDS("/Users/Divy/Dropbox (Partners HealthCare)/Haplotype_Analysis/Data/EigenStrat_all_rare.rds")
eig_GRM_rare_obj <- eig_GRM_rare$all_no_afr
GRM_common <- eig_GRM_obj$eigMat
GRM_rare <- eig_GRM_rare_obj$eigMat
nHap <- nrow(GRM_common)
nHap
dim(GRM_common)
dim(GRM_rare)
GRM_common_sim_matrix <- matrix(nrow=nrow(GRM_common), ncol=nrow(GRM_common))
GRM_rare_sim_matrix <- matrix(nrow=nrow(GRM_rare), ncol=nrow(GRM_rare))
dim(GRM_common_sim_matrix)
dim(GRM_rare_sim_matrix)
for (i in 1:nHap){
for (j in 1:i){
print(c(i,j))
GRM_common_sim_matrix[i,j] <- GRM_common_sim_matrix[j,i] <- pairwise_sim(GRM_common[i,1:2], GRM_common[j,1:2])
}
}
for (i in 1:nHap){
for (j in 1:i){
print(c(i,j))
GRM_rare_sim_matrix[i,j] <- GRM_rare_sim_matrix[j,i] <- pairwise_sim(GRM_rare[i,1:2], GRM_rare[j,1:2])
}
}
g <- ggplot() + geom_boxplot(data=melted_ratioMatrix, aes(x=var_type, y=ratio))
g <- g + xlab('variant type') + ylab('Ratio measure')
g <- g + theme(axis.text.x = element_text(angle = 60, hjust = 1))
g
SSR_matrix <- ratio_matrix(GRM_common_sim_matrix, GRM_rare_sim_matrix, nHap, superPopulationCode)
dim(GRM_common_sim_matrix)
dim(GRM_rare_sim_matrix)
nHap
length(superPopulationCode)
AFR_index <- read.table("/Users/Divy/Dropbox (Partners HealthCare)/Haplotype_Analysis/Data/AFR.txt")
head(AFR_index)
noAfr_superPopulationCode <- superPopulationCode[AFR_index$V1]
length(noAfr_superPopulationCode)
AFR_index <- read.table("/Users/Divy/Dropbox (Partners HealthCare)/Haplotype_Analysis/Data/All_Sample_except_AFR.txt")
noAfr_superPopulationCode <- superPopulationCode[AFR_index$V1]
length(noAfr_superPopulationCode)
SSR_matrix <- ratio_matrix(GRM_common_sim_matrix, GRM_rare_sim_matrix, nHap, noAfr_superPopulationCode)
common_ratio <- SSR_matrix[,'common_wg']/SSR_matrix[,'common_og']
rare_ratio <- SSR_matrix[,'rare_wg']/SSR_matrix[,'rare_og']
ratioMatrix <- cbind(common_ratio, rare_ratio)
colnames(ratioMatrix) <- c('common', 'rare')
melted_ratioMatrix <- melt(ratioMatrix)
colnames(melted_ratioMatrix) <- c('haplotype', 'var_type', 'ratio')
melted_ratioMatrix$superPop <- rep(superPopulationCode, 2)
dim(melted_ratioMatrix)
ratioMatrix <- cbind(common_ratio, rare_ratio)
colnames(ratioMatrix) <- c('common', 'rare')
melted_ratioMatrix <- melt(ratioMatrix)
colnames(melted_ratioMatrix) <- c('haplotype', 'var_type', 'ratio')
melted_ratioMatrix$superPop <- rep(noAfr_superPopulationCode, 2)
g <- ggplot() + geom_boxplot(data=melted_ratioMatrix, aes(x=var_type, y=ratio))
g <- g + xlab('variant type') + ylab('Ratio measure')
g <- g + theme(axis.text.x = element_text(angle = 60, hjust = 1))
g
g <- ggplot() + geom_boxplot(data=melted_ratioMatrix, aes(x=superPop, y=ratio, color=var_type))
g <- g + xlab('Super populations') + ylab('Ratio measure')
g <- g + theme(axis.text.x = element_text(angle = 60, hjust = 1))
g
samples <- read.table('/Users/Divy/Dropbox (Partners HealthCare)/Haplotype_Analysis/Data/AFR.txt')
popIndex <- samples$V1
GenotypeMatrix <- GenotypeMatrix_full[,popIndex]
GenotypeMatrix <- 1 - t(GenotypeMatrix)
AFR_common <- EigenAnalysis(GenotypeMatrix, 5)
EigenAnalysis <- function(hapMat, minVariants){
d <- colSums(hapMat > 0)
hapMat <- hapMat[,d >= minVariants]
mu_j <- colMeans(hapMat)
varSum <- colSums(hapMat)
p_i <- (1 + varSum)/(2 + 2*nrow(hapMat))
var_p_i <- sqrt(p_i * (1-p_i))
GenotypeMatrix_X <- matrix(nrow=nrow(hapMat), ncol=ncol(hapMat))
for (i in 1:ncol(hapMat)){
print(i)
GenotypeMatrix_X[,i] <- (hapMat[,i] - mu_j[i])/var_p_i[i]
}
A <- svd(GenotypeMatrix_X)
U_matrix <- A$u
results <- list(eigMat = U_matrix, totVar = ncol(GenotypeMatrix_X))
return(results)
}
samples <- read.table('/Users/Divy/Dropbox (Partners HealthCare)/Haplotype_Analysis/Data/AFR.txt')
popIndex <- samples$V1
GenotypeMatrix <- GenotypeMatrix_full[,popIndex]
GenotypeMatrix <- 1 - t(GenotypeMatrix)
AFR_common <- EigenAnalysis(GenotypeMatrix, 5)
GenotypeMatrix_full <- fread('/Users/Divy/Dropbox (Partners HealthCare)/Haplotype_Analysis/Data/SNP_100k_common.haps',
showProgress=TRUE,header=FALSE)
GenotypeMatrix_full <- as.matrix(GenotypeMatrix_full)
samples <- read.table('/Users/Divy/Dropbox (Partners HealthCare)/Haplotype_Analysis/Data/AFR.txt')
popIndex <- samples$V1
GenotypeMatrix <- GenotypeMatrix_full[,popIndex]
GenotypeMatrix <- 1 - t(GenotypeMatrix)
AFR_common <- EigenAnalysis(GenotypeMatrix, 5)
samples <- read.table('/Users/Divy/Dropbox (Partners HealthCare)/Haplotype_Analysis/Data/AFR.txt')
popIndex <- samples$V1
GenotypeMatrix <- GenotypeMatrix_rare[,popIndex]
GenotypeMatrix <- 1 - t(GenotypeMatrix)
AFR_rare <- EigenAnalysis(GenotypeMatrix, 5)
GenotypeMatrix_rare <- fread('/Users/Divy/Dropbox (Partners HealthCare)/Haplotype_Analysis/Data/SNP_100k_0.01.haps',
showProgress=TRUE,header=FALSE)
GenotypeMatrix_rare <- fread('/Users/Divy/Dropbox (Partners HealthCare)/Haplotype_Analysis/Data/SNP_100k_0.01.haps',
showProgress=TRUE,header=FALSE)
GenotypeMatrix_rare <- as.matrix(GenotypeMatrix_rare)
samples <- read.table('/Users/Divy/Dropbox (Partners HealthCare)/Haplotype_Analysis/Data/AFR.txt')
popIndex <- samples$V1
GenotypeMatrix <- GenotypeMatrix_rare[,popIndex]
GenotypeMatrix <- 1 - t(GenotypeMatrix)
AFR_rare <- EigenAnalysis(GenotypeMatrix, 5)
Eig_afr_obj <- list(common=AFR_common, rare = AFR_rare)
?saveRDS
saveRDS(Eig_afr_obj, file='/Users/Divy/Dropbox (Partners HealthCare)/Haplotype_Analysis/Data/EigenStrat_AFR.rds')
dim(GenotypeMatrix_full)
samples <- read.table('/Users/Divy/Dropbox (Partners HealthCare)/Haplotype_Analysis/Data/EAS.txt')
popIndex <- samples$V1
GenotypeMatrix <- GenotypeMatrix_full[,popIndex]
GenotypeMatrix <- 1 - t(GenotypeMatrix)
EAS_common <- EigenAnalysis(GenotypeMatrix, 5)
samples <- read.table('/Users/Divy/Dropbox (Partners HealthCare)/Haplotype_Analysis/Data/EAS.txt')
popIndex <- samples$V1
GenotypeMatrix <- GenotypeMatrix_rare[,popIndex]
GenotypeMatrix <- 1 - t(GenotypeMatrix)
EAS_rare <- EigenAnalysis(GenotypeMatrix, 5)
Eig_eas_obj <- list(common=EAS_common, rare = EAS_rare)
saveRDS(Eig_eas_obj, file='/Users/Divy/Dropbox (Partners HealthCare)/Haplotype_Analysis/Data/EigenStrat_EAS.rds')
eig_GRM <- readRDS("/Users/Divy/Dropbox (Partners HealthCare)/Haplotype_Analysis/Data/EigenStrat_AFR.rds")
eig_GRM_obj <- eig_GRM$common
eig_GRM_rare_obj <- eig_GRM$rare
dim(eig_GRM_obj)
dim(eig_GRM_obj$eigMat)
GRM_common <- eig_GRM_obj$eigMat
GRM_rare <- eig_GRM_rare_obj$eigMat
nHap <- nrow(GRM_common)
nHap
dim(GRM_rare)
dim(GRM_common)
GRM_common_sim_matrix <- matrix(nrow=nrow(GRM_common), ncol=nrow(GRM_common))
GRM_rare_sim_matrix <- matrix(nrow=nrow(GRM_rare), ncol=nrow(GRM_rare))
AFR_index <- read.table("/Users/Divy/Dropbox (Partners HealthCare)/Haplotype_Analysis/Data/AFR.txt")
AFR_superPopulationCode <- superPopulationCode[AFR_index$V1]
length(AFR_superPopulationCode)
for (i in 1:nHap){
for (j in 1:i){
print(c(i,j))
GRM_common_sim_matrix[i,j] <- GRM_common_sim_matrix[j,i] <- pairwise_sim(GRM_common[i,1:2], GRM_common[j,1:2])
}
}
for (i in 1:nHap){
for (j in 1:i){
print(c(i,j))
GRM_rare_sim_matrix[i,j] <- GRM_rare_sim_matrix[j,i] <- pairwise_sim(GRM_rare[i,1:2], GRM_rare[j,1:2])
}
}
for (i in 1:nHap){
for (j in 1:i){
print(c(i,j))
GRM_rare_sim_matrix[i,j] <- GRM_rare_sim_matrix[j,i] <- pairwise_sim(GRM_rare[i,1:2], GRM_rare[j,1:2])
}
}
A = cbind(c(-1,-2),c(3,4))
A
lambda_I = cbind(c(1 - 1/1000,0), c(0, 1 - 1/1000))
lambda_I
A - lambda_I
inv(A)
?inverse
A^-1
new.inv = new^(-1)
new.inv = new^-1
new = A - lambda_I
new.inv = new^-1
new.inv
new.inv %% c(0,1)
new.inv %*% c(0,1)
norm(new.inv)
0.3333333/1.00025
0.3332223/ 1.00025
norm(new.inv %*% c(0,1))
norm(new.inv %*% c(0,1))
0.3333333/0.6665556
0.3332223/0.6665556
717+637
351+415
library(ggplot2)
library(reshape2)
library(superheat)
# All population - common variants
Genome_Map <- read.table('/Users/Divy/Dropbox (Partners HealthCare)/Haplotype_Analysis/Data/Genome_Map.tsv',sep='\t',header=TRUE)
subset <- read.table('/Users/Divy/Dropbox (Partners HealthCare)/Haplotype_Analysis/Data/inputSamples.txt')
Genome_map_sub <- Genome_Map[Genome_Map$Sample.name %in% subset$V1,]
Genome_map_sub_ordered <- Genome_map_sub[order(Genome_map_sub$Sample.name),]
subPopulationCode <- as.character(Genome_map_sub_ordered$Population.code)
superPopulationCode <- as.character(Genome_map_sub_ordered$Superpopulation.code)
subCode_by_super <- c("ACB", "ASW", "ESN", "MSL", "GWD", "LWK", "YRI",
"CLM", "MXL","PEL", "PUR",
"CDX", "CHB", "CHS", "JPT", "KHV",
"CEU", "FIN", "GBR", "IBS","TSI",
"BEB", "GIH", "ITU", "PJL", "STU")
subPopulationCode <- rep(subPopulationCode, each=2)
superPopulationCode <- rep(superPopulationCode, each=2)
subFull_by_super <- c("African Caribbeans in Barbados", "Americans of African Ancestry in SW USA",
"Esan in Nigeria", "Mende in Sierra Leone", "Gambian in Western Divisions in the Gambia",
"Luhya in Webuye, Kenya", "Yoruba in Ibadan, Nigeria",
"Colombians from Medellin, Colombia", "Mexican Ancestry from Los Angeles USA",
"Peruvians from Lima, Peru", "Puerto Ricans from Puerto Rico",
"Chinese Dai in Xishuangbanna, China", "Han Chinese in Beijing, China",
"Southern Han Chinese", "Japanese in Tokyo, Japan",
"Kinh in Ho Chi Minh City, Vietnam", "Utah Residents (CEPH) with Northern and Western European Ancestry",
"Finnish in Finland", "British in England and Scotland",
"Iberian Population in Spain","Toscani in Italia",
"Bengali from Bangladesh", "Gujarati Indian from Houston, Texas",
"Indian Telugu from the UK", "Punjabi from Lahore, Pakistan",
"Sri Lankan Tamil from the UK")
##########################################################################
# Full names of the super and sub populations
superPopulationFull <- superPopulationCode
superPopulationFull[superPopulationFull=='AFR'] <- 'African'
superPopulationFull[superPopulationFull=='AMR'] <- 'Ad Mixed American'
superPopulationFull[superPopulationFull=='EAS'] <- 'East Asian'
superPopulationFull[superPopulationFull=='EUR'] <- 'European'
superPopulationFull[superPopulationFull=='SAS'] <- 'South Asian'
superPopulationFull <- factor(superPopulationFull, levels = c('African', 'Ad Mixed American',
'East Asian', 'European',
'South Asian'))
subPopulationFull <- subPopulationCode
subPopulationFull[subPopulationFull=='ACB'] <- 'African Caribbeans in Barbados'
subPopulationFull[subPopulationFull=='ASW'] <- 'Americans of African Ancestry in SW USA'
subPopulationFull[subPopulationFull=='ESN'] <- 'Esan in Nigeria'
subPopulationFull[subPopulationFull=='MSL'] <- 'Mende in Sierra Leone'
subPopulationFull[subPopulationFull=='GWD'] <- 'Gambian in Western Divisions in the Gambia'
subPopulationFull[subPopulationFull=='LWK'] <- 'Luhya in Webuye, Kenya'
subPopulationFull[subPopulationFull=='YRI'] <- 'Yoruba in Ibadan, Nigeria'
subPopulationFull[subPopulationFull=='CLM'] <- 'Colombians from Medellin, Colombia'
subPopulationFull[subPopulationFull=='PEL'] <- 'Peruvians from Lima, Peru'
subPopulationFull[subPopulationFull=='PUR'] <- 'Puerto Ricans from Puerto Rico'
subPopulationFull[subPopulationFull=='MXL'] <- 'Mexican Ancestry from Los Angeles USA'
subPopulationFull[subPopulationFull=='CDX'] <- 'Chinese Dai in Xishuangbanna, China'
subPopulationFull[subPopulationFull=='CHB'] <- 'Han Chinese in Beijing, China'
subPopulationFull[subPopulationFull=='CHS'] <- 'Southern Han Chinese'
subPopulationFull[subPopulationFull=='JPT'] <- 'Japanese in Tokyo, Japan'
subPopulationFull[subPopulationFull=='KHV'] <- 'Kinh in Ho Chi Minh City, Vietnam'
subPopulationFull[subPopulationFull=='CEU'] <- 'Utah Residents (CEPH) with Northern and Western European Ancestry'
subPopulationFull[subPopulationFull=='FIN'] <- 'Finnish in Finland'
subPopulationFull[subPopulationFull=='GBR'] <- 'British in England and Scotland'
subPopulationFull[subPopulationFull=='IBS'] <- 'Iberian Population in Spain'
subPopulationFull[subPopulationFull=='TSI'] <- 'Toscani in Italia'
subPopulationFull[subPopulationFull=='BEB'] <- 'Bengali from Bangladesh'
subPopulationFull[subPopulationFull=='GIH'] <- 'Gujarati Indian from Houston, Texas'
subPopulationFull[subPopulationFull=='ITU'] <- 'Indian Telugu from the UK'
subPopulationFull[subPopulationFull=='PJL'] <- 'Punjabi from Lahore, Pakistan'
subPopulationFull[subPopulationFull=='STU'] <- 'Sri Lankan Tamil from the UK'
##########################################################################
subPopulationCode <- factor(subPopulationCode, levels = subCode_by_super)
subPopulationFull <- factor(subPopulationFull, levels = subFull_by_super)
###############
# All samples #
###############
# Common Variants #
# Weighted analysis just in the European population
weightedJaccard <- readRDS("/Users/Divy/Dropbox (Partners HealthCare)/Haplotype_Analysis/Data/weighteJaccard_1000GP_All_Sample_except_AFR.rds")
PCA_Jaccard <- princomp(weightedJaccard$common)
EigenVectorMatrix <- PCA_Jaccard$loadings
All_Sample_except_AFR <- which(superPopulationCode!='AFR')
subPopulationCode_2 <- subPopulationCode[All_Sample_except_AFR]
superPopulationCode_2 <- superPopulationCode[All_Sample_except_AFR]
subPopulationFull_2 <- subPopulationFull[All_Sample_except_AFR]
superPopulationFull_2 <- superPopulationFull[All_Sample_except_AFR]
PCA_Df <- as.data.frame(EigenVectorMatrix[,1:10])
PCA_Df$subPop <- subPopulationCode_2
PCA_Df$superPop <- superPopulationCode_2
PCA_Df$subPop_full <- subPopulationFull_2
PCA_Df$superPop_full <- superPopulationFull_2
PCA_Df_common <- PCA_Df
PCA_Df_common$var.type <- 'common'
p <- ggplot(PCA_Df_common, aes(Comp.1, Comp.2))
p <- p + geom_point(aes(colour = superPop))
p <- p + xlab('PC1') + ylab('PC2')
p
# Rare variants #
PCA_Jaccard <- princomp(weightedJaccard$rare)
EigenVectorMatrix <- PCA_Jaccard$loadings
PCA_Df <- as.data.frame(EigenVectorMatrix[,1:10])
PCA_Df$subPop <- subPopulationCode_2
PCA_Df$superPop <- superPopulationCode_2
PCA_Df$subPop_full <- subPopulationFull_2
PCA_Df$superPop_full <- superPopulationFull_2
PCA_Df_rare <- PCA_Df
PCA_Df_rare$var.type <- 'rare'
p <- ggplot(PCA_Df, aes(Comp.1, Comp.2))
p <- p + geom_point(aes(colour = superPop))
p <- p + xlab('PC1') + ylab('PC2')
p
# Combined Figure #
PCA_Df_all <- rbind(PCA_Df_rare, PCA_Df_common)
p <- ggplot(PCA_Df_all, aes(Comp.1, Comp.2))
p <- p + geom_point(aes(colour = superPop_full))
p <- p + xlab('PC1') + ylab('PC2')
p <- p + facet_wrap( ~ var.type, scales = "free")
p <- p + theme(strip.text.x = element_text(size = 16))
p
head(PCA_Df_all)
PCA_Df_all$super.Population <- PCA_Df_all$superPop_full
p <- ggplot(PCA_Df_all, aes(Comp.1, Comp.2))
p <- p + geom_point(aes(colour = super.Population))
p <- p + xlab('PC1') + ylab('PC2')
p <- p + facet_wrap( ~ var.type, scales = "free")
p <- p + theme(strip.text.x = element_text(size = 16))
p
1925*2.5
571+351
717+885
1602/922
717/351
885/571
675*12*20
500000*0.05
500000*0.05
25000/12
230 - 30
200 - 31
169-31
138-30
108-31
77 - 30
47 - 31
34.7 * 6
9.31 * 3300
208.2 + 40
10.8 * 3300
9.31 * 3300
10.8 + 9.31
20.11 * 3300
15000 * 18
173 + 138
239 + 138
162+ 178
239 + 138
212 + 138
269+ 178
2.70+ 2 + 55.78+ 100 + 44.99 +1925 + 23.87 + 73.55
2227.89 + 5 + 8.99 + 2.7 + 72.87 + 21.57 + 45 + 27
7.71+ 255.72 + 0.94
264.37/2
132.185 + 461.6
116/2
675*8
7.71+255.72+7.71
271.14 * 0.5
842 - 135.57
0.83/3.83
0.33/3.83
0.43/3.83
library(glmnet);
# Directory
flag = file.exists("testData.RData");
if(!flag){setwd("~/Dropbox/6.867_Project/Data/")};
library(glmnet);
# Import
load("trainData.RData");
Data = trainData;
# Variance filter
ind = (apply(Data,MARGIN=1,FUN=var)>0);
Data = Data[ind,];
# Outcomes
z = colnames(Data);
y = rep(0,length(z));
y[grep(pattern="^HCC.*",x=z)]=1;
# Check : z[as.logical(y)]
# LASSO
X = data.matrix(t(Data));
M1 = glmnet(y=y,x=X,family="binomial",alpha=0.95,nlambda=101);
# Selected predictors
lambda = M1$lambda[which.max(M1$df)];
Cols = predict(object=M1,s=lambda,type="nonzero")$X1;
Sub = data.frame(X[,Cols]);
# Output
Sub$y = y;
Sub$ID = row.names(Sub);
Sub = Sub[order(Sub$ID),];
write.csv(Sub,file="Lasso_Subset.csv",row.names=F);
getwd()
setwd('/Users/Divy/Documents/code-trick/R/')
# Directory
flag = file.exists("testData.RData");
if(!flag){setwd("~/Data/")};
library(glmnet);
getwd()
if(!flag){setwd("/Data/")};
# Import
load("trainData.RData");
if(!flag){setwd("../Data/")};
library(glmnet);
# Import
load("trainData.RData");
getwd()
setwd('/Users/Divy/Documents/code-trick/R/glmnet/')
flag = file.exists("testData.RData");
if(!flag){setwd("../Data/")};
library(glmnet);
# Import
load("trainData.RData");
Data = trainData;
# Variance filter
ind = (apply(Data,MARGIN=1,FUN=var)>0);
Data = Data[ind,];
ind
sum(ind)
head(data)
head(Data)
dim(Data)
# Outcomes
z = colnames(Data);
y = rep(0,length(z));
y[grep(pattern="^HCC.*",x=z)]=1;
# Check : z[as.logical(y)]
y
z
# LASSO
X = data.matrix(t(Data));
M1 = glmnet(y=y,x=X,family="binomial",alpha=0.95,nlambda=101); # This is not strictly lass as alpha is 0.95 instead of 1
# Selected predictors
lambda = M1$lambda[which.max(M1$df)];
Cols = predict(object=M1,s=lambda,type="nonzero")$X1;
Sub = data.frame(X[,Cols]);
lambda
Cols
dim(Cols)
Sub
# Output
Sub$y = y;
Sub$ID = row.names(Sub);
Sub = Sub[order(Sub$ID),];
write.csv(Sub,file="Lasso_Subset.csv",row.names=F);
?train
library(caret);
library(foreach);
library(ggplot2);
library(mvnfast);
?train
library(caret);
library(foreach);
library(ggplot2);
library(mvnfast);
########################
# Simulate data
########################
install.packages("mvnfast")
install.packages("RcppArmadillo")
# Observations
n = 100;
# Parameters
mu1 = c(0,0);
mu2 = c(2,2);
sigma1 = matrix(c(1,0.5,0.5,1),nrow=2,byrow=T);
sigma2 = matrix(c(1,-0.2,-0.2,1),nrow=2,byrow=T);
# Membership probability
p1 = 0.35;
p2 = 1 - p1;
# Simulate
D = foreach(i=1:n,.combine=rbind) %do% {
# Cluster
z = 1 + rbinom(n=1,size=1,prob=p2);
# Covariate
if(z==1){
x = rmvn(n=1,mu=mu1,sigma=sigma1);
} else {
x = rmvn(n=1,mu=mu2,sigma=sigma2);
}
# Out
Out = data.frame(t(c(z,x)));
colnames(Out) = c("y","x1","x2");
return(Out);
}
install.packages("RcppArmadillo")
install.packages("mvnfast")
library(Rcpp)
install.packages("mvnfast")
install.packages("mvnfast")
